@page "/product/{id:int}"
@inject IProductService ProductService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject ICartService CartService
@inject AuthenticationStateProvider AuthStateProvider

<div class="views">
    <i class="oi oi-eye"></i>@GetViewString()
</div>

<div class="row mt-4">
    <div class="col-lg-8 offset-lg-2 col-md-8 offset-md-2 col-sm-8 offset-sm-2">
        <div class="media">
            <div class="media-img-wrapper mr-2">
                <img class="media-img" src="@product.Image" alt="@product.Title" />
            </div>
            <div class="media-body">
                <h2 class="mb-0">@product.Title</h2>
                <p>@product.Description</p>
                @if(product.OriginalPrice > product.Price)
                {
                    <h6 class="text-muted original-price">$@product.OriginalPrice</h6>
                }
                <h4 class="price">$@product.Price</h4>
                <button class="btn btn-primary" @onclick="AddToCart"><i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart</button>
            </div>
        </div>
   </div>
</div>




@code {
    [Parameter]
    public int Id { get; set; }

    private Product product = new Product();

    protected override async Task OnParametersSetAsync()
    {
        product = await ProductService.GetProduct(Id);
    }

    private async Task AddToCart()
    {
        await CartService.AddToCart(product);
    }

    private string GetViewString()
    {
        if (product.Views > 1000000)
            return $"{((float)product.Views / 1000000).ToString("#.##")}M";
        if (product.Views > 100000)
            return $"{((float)product.Views / 1000).ToString("#")}K";
        if (product.Views > 1000)
            return $"{((float)product.Views / 1000).ToString("#.##")}K";

        return product.Views.ToString("0##");
    }
}
